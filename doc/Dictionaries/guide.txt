This is a simple guide to get you started with creating your own
commands for Ubuntu Speech Recognition. It is meant for begginers.

This should not take long to read and you should fully understand the
basics of the dictionary language. If you have any suggestions please
tell me [JamezQ].

You should edit these commands in your personal dictionary. It is
located in ~/.palver.d/personal.dic
If you don't have a personal dictionary please create it, this will
allow you immediate testing of your commands.

If you are unable to set up your microphone or experiance poor
accuracy, you can still build and test your commands by running
./recognize "speech you would say"


#######################################
PART 1, basic syntax and introduction:
#######################################

The syntax of a dictionary command is:

SPEECH PERSON SAID
  COMMAND TO RUN

COMMAND TO RUN must be indented and must be indented with spaces and
not tabs. It can be indented as much as you want, but the standard is
two spaces.

Here is an example.

how are you computer
  say "I am fine thank you"

Try adding that to your personal.dic, save it and then speak "how are
you computer". If it recognized what you said, it should speak back to
you and say "I am fine thank you"!

the command to run always looks for a command in ./Recognition/bin ,
not /bin or /usr/bin or anywhere in the $PATH.

However, this tutorial focuses on the SPEECH PERSON SAID line, and not
much on the COMMAND TO RUN line. To get information on how to make
your own *COMMANDS*(scripts), please read information in the Plugins
folder of Doc.

To clarify, "open my web browser" is speech matching, while creating
./Recognition/bin/open "google-chrome" is making a script.

Lets get used to the most basic syntax with a few more examples.

I will be using "say" for the command in all my examples because it is
available by default and is easy to know when you did it right.

tell me hello
  say "hello"
tell me hello two times
  say "hello hello"
what is two times four
  say "eight"

Test those out, make your own, once you fully understand it, move to
the next section.

######################
PART 2, optional speech.
######################

Think about how you talk, do you always say full sentences, or do you
sometimes leave out words to be quick. For example.

"please open the door"
"open the door please"
"open the door"
"open door"

This is what people are like, we have many ways to say the same thing,
but how can a computer then understand a human? The answer is fuzzy
recognition. Here is an example that matches all four of those
sentences.

[please ]open [the ]door
  say "Door has been opened"

That one line matches all of those ways of saying how to open a door,
the reason is that anything contained in [] is considered optional.

So when we say.

[please ]open

We mean that the person *may* start the sentence with "please", or they
may just directly start it with "open", notice the space after please
in [please ], this is important, if we just did [please] open we would
look for a space before open if they didn't say please. " open"
doesn't make sense.

Here is another example:

[can you ]start [the ]server
  say "Server started boss"

What sentences will this match? Can you see it at first glance?

~~~~~~~~~~~
PART 2 EXERCISE 1:

Before moving to PART 3, create a single line to match all of these
possible sentences. Make it say "It's right now"

"what is the time today"
"what's the time"
"what is the current time"
"what's the current time"

After you make the line, make sure to test it with those four sentences!

##################################
PART 3, Required speech and lists.
##################################

What if you wanted to match,

there are cat people and there are dog people
and
there are dog people and there are cat people

but *not*

there are people and there are people?

The answer is a list in required speech.
Let me show you before I explain it.

there are <cat,dog> people and there are <cat,dog> people
  say "And there are fish people."

Anything inside of <> is required, if nothing in the <> is matched,
the speech itself will not match.

A list in <> is separated by comma's.

<1,2,3,4,5,6>
Will match
1
2
3
4
5
6

It's also possible to have a single item inside of a <>. For instance
<this> dog
Will match

this dog

But as you can see, a single item inside of <> is the same as it just
being on the line not inside of <>.

Here are some more examples:

<don't,do not> open the <door,closet,cookie jar,box>
  say "But I desire what is inside."
<kick,pick up,release,throw> [the ]<ball,box,baby,tiger>
  say "Action taken"

A optional expression [] can also have a list in it.


[1,2,3,4,5][ ]dog[s]
This matches:
1 dog
2 dogs
3 dogs
4 dogs
5 dogs

OR

dog

Notice that [1,2,3,4,5] is still optional, it will match nothing at all.




~~~~~~~~~~~~~~~~~
PART 3 EXERCISE 1:

Here is complicated expression using what you know so far:

[please,can you,may you,shall you][ ]<take,drop,throw,give,pick> [up,out][ ][the,a][ ]<ball,cat,dog,box>
  say "Woah"

Can you see what it will match?

Not couting the optional spaces, this expression can match 720 unique
sentences.

Write down 9 sentences that you think it will match before testing
them.


##################################
PART 4, The WORD variable
##################################

What if you wanted to not just recognize speech, but use it as well?
For example:

throw ball
  say "ball thrown"

How would you get it to say "throw box" too?

Sure you know how to recognize it.

throw <ball,box>
  say "ball thrown"

But as you can see, even if you say "throw box" the program will
respond "ball thrown".

The solution to this problem is a variable.

throw (WORD object)
  say "$object$ thrown"

Try it! what happens?

No mattter what you say, the program will respond with

WHAT YOU SAID thrown

To first understand this, lets look at the expression we changed:

                     (WORD object)
                       |     |
                      /       \
                     /         \
    ++++++++++++++++            +++++++++++++++++
    The variable type           The variable Name

As you can see, with in the () there are two parts, the first part is
the variable type. And the 2nd part is the variable name. 

WORD - The variable type
 This allows the dictionary interpreter to understand what kind of
 text we want to hold in the variable. In this case we want to catch a
 single word, so we use the WORD type.

object - The variable name
 This is simply the name of a variable so you can use it in the
 command. When using a name it a command, it must be surrounded by
 $'s. For instance 'say "$object$ thrown"', here $object$ will be
 replaced by whatever word they said after throw.

You may name a variable anything you like, as long as it does not
contain a $ and has no spaces. It's best to call it something that has
to do with what it is meant to hold. 


Here are a few more examples:

(WORD action) [the ](WORD object)
  say "I just $action$ed the $object$."
I have (WORD number) objects
  say "Yes, you have $number$ objects"


There are no exercises in this section.

##################################
PART 5, The LINE variable
##################################

There are only two types, WORD and LINE. WORD variables are for
matching a single word, while LINE variables are meant to match
mutiple words.

For begginers, the only needed usage of this variable is something
like this.

<can you,please> say (LINE words)
  say "okay, $words$"

If I say:

can you say I love you

the program will respond

"okay, I love you"

Anything after "can you say " is put into the words variable.


Build an expression to match all of these sentences:

1. activate the global speech recognition program
2. turn off the baby restraint system
3. kill the unresponsive process.
4. create a new letter to mom
5. turn on the fan

but *DONT* match these

1. stop all the bears
2. don't write a letter to mom

You should take no more then this space in the expression:
***************************************************************************************

HINT: You need to use LINE, optional matching and lists of required matches.


####################################################
PART 6, A expression may contain another expression
####################################################

Just to be sure, an EXPRESSION is anything that matches speech.

So <cat,dog> is a expression, but so is "cat" and "dog" itself.
As is the "a" in cat and the "o" in dog. So as you can see,
expressions can, and almost always do contain expressions in them.

If you are confused by this, let an example explain it:

Make a expression to match all of these (partial) sentences

turn on
turn off
turn over
turn around
turn in
do nothing

How would you match all of these? Well without the last one "do
nothing" it would be easy.

turn <on,off,over,around,in>

But now that there is "do nothing", how would you match them all in a
simple manner that makes sense?

Would you do this?

<turn on,turn off,turn over,turn around,turn in,do nothing> 

This is bad, as it is no better then just writting them out one line
at a time. In fact we have already figured out our answer

a line can start with

turn <on,off,over,around,in>

OR

do nothing

So think, if a line could start with dog or cat, what would you do?

Obviously <dog,cat>. And in that you have your answer.

<turn <on,off,over,around,in>,do nothing>

A <> (or a []) does not only have to contain characters. They can
contain any kind of expression.


That is it for the begginers guide! Knowing the above should get you
through most of all the matching you need to do. 

To understand the rest of the lanuage, read the advguide.txt
